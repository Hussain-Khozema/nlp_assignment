By using our site, you acknowledge that you have read and understand our Cookie Policy, Privacy Policy, and our Terms of Service. Teams Q&A for Work Stack Overflow for Teams is a private, secure spot for you and
                            your coworkers to find and share information. In Java, arrays don't override toString(), so if you try to print one directly, you get the className + '@' + the hex of the hashCode of the array, as defined by Object.toString(): But usually, we'd actually want something more like . What's the simplest way of doing that? Here are some example inputs and outputs: Since Java 5 you can import java.util.Arrays; and then use Arrays.toString(arr) or Arrays.deepToString(arr) for arrays within arrays. Note that the Object version calls .toString() on each object in the array. The output is even decorated in the exact way you're asking. Examples: Output: Output: Output: Output: Always check the standard libraries first. Then try: or if your array contains other arrays as elements: This is nice to know, however, as for "always check the standard libraries first" I'd never have stumbled upon the trick of Arrays.toString( myarray ) --since I was concentrating on the type of myarray to see how to do this. I didn't want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn't doing it. In JDK1.8 you can use aggregate operations and a lambda expression: Starting with Java 8, one could also take advantage of the join() method provided by the String class to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below): The output will be "Hey there amigo!". If you're using Java 1.4, you can instead do: (This works in 1.5+ too, of course.) We could have used Arrays.toString(array) to print one dimensional array and Arrays.deepToString(array) for multi-dimensional arrays. Now we have got the option of Stream and lambda to print the array. Printing One dimensional Array: The output is: 1
  2
  3
  4
  5
  John
  Mary
  Bob Printing Multi-dimensional Array
Just in case we want to print multi-dimensional array we can use Arrays.deepToString(array) as: Now the point to observe is that the method Arrays.stream(T), which in case of int returns us Stream<int> and then method flatMapToInt() maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element. The output is: , , ]
  , , ]
  11
  12
  21
  22
  31
  32
  33
  John
  Bravo
  Mary
  Lee
  Bob
  Johnson As a direct answer, the solution provided by several, including @Esko, using the Arrays.toString and Arrays.deepToString methods, is simply the best. Below I try to list some of the other methods suggested, attempting to improve a little, with the most notable addition being the use of the Stream.collect operator, using a joining Collector, to mimic what the String.join is doing. Arrays.deepToString(arr) only prints on one line. To actually get a table to print as a two dimensional table, I had to do this: It seems like the Arrays.deepToString(arr) method should take a separator string, but unfortunately it doesn't. Different Ways to Print Arrays in Java: Simple Way Output: Using toString() Output: Printing Array of Arrays Output: [[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,
   , ] Resource: Access An Array Using regular for loop is the simplest way of printing array in my opinion.
Here you have a sample code based on your intArray It gives output as yours
    1, 2, 3, 4, 5 It should always work whichever JDK version you use: It will work if the Array contains Objects. If the Array contains primitive types, you can use wrapper classes instead storing the primitive directly as.. Example: Replace it with: Update : Yes ! this is to be mention that converting an array to an object array OR to use the Object's array is costly and may slow the execution. it happens by the nature of java called autoboxing. So only for printing purpose, It should not be used. we can make a function which takes an array as parameter and prints the desired format as I came across this post in Vanilla #Java recently. It's not very convenient writing Arrays.toString(arr);, then importing java.util.Arrays; all the time. Please note, this is not a permanent fix by any means. Just a hack that can make debugging simpler. Printing an array directly gives the internal representation and the hashCode. Now, all classes have Object as the parent-type. So, why not hack the Object.toString()? Without modification, the Object class looks like this: What if this is changed to: This modded class may simply be added to the class path by adding the following to the command line: -Xbootclasspath/p:target/classes. Now, with the availability of deepToString(..) since Java 5, the toString(..) can easily be changed to deepToString(..) to add support for arrays that contain other arrays. I found this to be a quite useful hack and it would be great if Java could simply add this. I understand potential issues with having very large arrays since the string representations could be problematic. Maybe pass something like a System.outor a PrintWriter for such eventualities. In java 8 it is easy. there are two keywords method reference: ::println If you want to print all elements in the array in the same line, then just use print instead of println i.e. Another way without method reference just use: There's one additional way if your array is of type char: prints To add to all the answers, printing the object as a JSON string is also an option. Using Jackson: Using Gson: You could loop through the array,  printing out each item, as you loop. For example: Output: There Are Following way to print Array A simplified shortcut I've tried is this: It will print No loops required in this approach and it is best for small arrays only For-each loop can also be used to print elements of array: Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option
For example: I used the following dependency This is marked as a duplicate for printing a byte. Note: for a byte array there are additional methods which may be appropriate. You can print it as a String if it contains ISO-8859-1 chars. or if it contains a UTF-8 string or if you want print it as hexadecimal. or if you want print it as base64. or if you want to print an array of signed byte values or if you want to print an array of unsigned byte values if you are running jdk 8. output: In java 8 : If using Commons.Lang library, we could do: ArrayUtils.toString(array) Output: In JDK1.8 you can use aggregate operations and a lambda expression: Also, starting with Java 8, one could also take advantage of the join() method provided by the String class to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below) `
The output will be "Hey there amigo!" There are several ways to print an array elements.First of all,  I'll explain that, what is an array?..Array is a simple data structure for storing data..When you define an array , Allocate set of ancillary memory blocks in RAM.Those memory blocks are taken  one unit .. Ok, I'll create an array like this, Now look at the output,  You can see an unknown string printed..As I mentioned before, the memory address whose array(number array) declared is printed.If you want to display elements in the array, you can use "for loop " , like this.. Now look at the output,  Ok,Successfully printed elements of one dimension  array..Now I am going to consider two dimension array..I'll declare two dimension array as "number2" and print the elements using "Arrays.deepToString()" keyword.Before using that You will have to import 'java.util.Arrays' library. consider the output,  At the same time , Using two for loops ,2D elements can be printed..Thank you ! To subscribe to this RSS feed, copy and paste this URL into your RSS reader. site design / logo © 2020 Stack Exchange Inc; user contributions licensed under cc by-sa.                    rev 2020.10.19.37839 