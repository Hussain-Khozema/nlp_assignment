By using our site, you acknowledge that you have read and understand our Cookie Policy, Privacy Policy, and our Terms of Service. Teams Q&A for Work Stack Overflow for Teams is a private, secure spot for you and
                            your coworkers to find and share information. What does ArrayIndexOutOfBoundsException mean and how do I get rid of it? Here is a code sample that triggers the exception: Your first port of call should be the documentation which explains it reasonably clearly: Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array. So for example: As for how to avoid it... um, don't do that. Be careful with your array indexes. One problem people sometimes run into is thinking that arrays are 1-indexed, e.g. That will miss out the first element (index 0) and throw an exception when index is 5. The valid indexes here are 0-4 inclusive. The correct, idiomatic for statement here would be: (That's assuming you need the index, of course. If you can use the enhanced for loop instead, do so.) Update: as per your code snippet, The index is inclusive the array's length. This is out of bounds. You need to replace <= by <. From this excellent article: ArrayIndexOutOfBoundsException in for loop To put it briefly: In the last iteration of i will equal name.length which is an illegal index, since array indices are zero-based. Your code should read It means that you are trying to access an index of an array which is not valid as it is not in between the bounds. For example this would initialize a primitive integer array with the upper bound 4. Programmers count from zero. So this for example would throw an ArrayIndexOutOfBoundsException as the upper bound is 4 and not 5. To avoid an array index out-of-bounds exception, one should use the enhanced-for statement where and when they can. The primary motivation (and use case) is when you are iterating and you do not require any complicated iteration steps.  You would not be able to use an enhanced-for to move backwards in an array or only iterate on every other element. You're guaranteed not to run out of elements to iterate over when doing this, and your  example is easily converted over. The code below: ...is equivalent to this: What causes ArrayIndexOutOfBoundsException? If you think of a variable as a "box" where you can place a value, then an array is a series of boxes placed next to eachother, where the number of boxes is a finite and explicit integer. Creating an array like this: creates a row of 5 boxes, each holding an int. Each of the boxes have an index, a position in the series of boxes. This index starts at 0, and ends at N-1, where N is the size of the array (the number of boxes). To retrieve one of the values from this series of boxes, you can refer to it through its index, like this: Which will give you the value of the 4th box in the series (since the first box has index 0). An ArrayIndexOutOfBoundsException is caused by trying to retrive a "box" that does not exist, by passing an index that is higher than the index of last "box", or negative. With my running example, these code snippets would produce such an exception: How to avoid ArrayIndexOutOfBoundsException In order to prevent ArrayIndexOutOfBoundsException, there are some key points to consider: Looping When looping through an array, always make sure that the index you are retrieving is strictly smaller than the length of the array (the number of boxes). For instance: Notice the <, never mix a = in there.. You might want to be tempted to do something like this: Just don't. Stick to the one above (if you need to use the index) and it will save you a lot of pain. Where possible, use foreach: This way you won't have to think about indexes at all. When looping, whatever you do, NEVER change the value of the loop iterator (here: i). The only place this should change value is to keep the loop going. Changing it otherwise is just risking an exception, and is in most cases not neccessary. Retrieval/update When retrieving an arbitrary element of the array, always check that it is a valid index against the length of the array: In your code you have accessed the elements from index 0 to the length of the string array. name.length gives the number of string objects in your array of string objects i.e. 3, but you can access only up to index 2 name,
because the array can be accessed from index 0 to name.length - 1 where you get name.length number of objects. Even while using a for loop you have started with index zero and you should end with name.length - 1. In an array a you can access form a to a. For example: In your case: For your given array the length of the array is 3(i.e. name.length = 3). But as it stores element starting from index 0, it has max index 2. So, instead of  'i**<=name.length' you should write 'i<**name.length' to avoid 'ArrayIndexOutOfBoundsException'. So much for this simple question, but I just wanted to highlight a new feature in Java which will avoid all confusions around indexing in arrays even for beginners. Java-8 has abstracted the task of iterating for you. What's the benefit? Well, one thing is the readability like English. Second, you need not worry about the ArrayIndexOutOfBoundsException You are getting ArrayIndexOutOfBoundsException due to i<=name.length part. name.length return the length of the string name, which is 3. Hence when you try to access name, it's illegal and throws an exception. Resolved code: It's defined in the Java language specification: The public final field length, which contains the number of components
  of the array. length may be positive or zero.  That's how this type of exception looks when thrown in Eclipse. The number in red signifies the index you tried to access. So the code would look like this: The error is thrown when you try to access an index which doesn't exist in that array. If an array has a length of 3, then the only valid indexes are: If an array has a length of 1, then the only valid index is: Any integer equal to the length of the array, or bigger than it: is out of bounds. Any integer less than 0: is out of bounds; P.S.: If you look to have a better understanding of arrays and do some practical exercises, there's a video here: tutorial on arrays in Java For multidimensional arrays, it can be tricky to make sure you access the length property of the right dimension. Take the following code for example: Each dimension has a different length, so the subtle bug is that the middle and inner loops use the length property of the same dimension (because a.length is the same as a.length). Instead, the inner loop should use a.length (or a.length, for simplicity). The most common case I've seen for seemingly mysterious ArrayIndexOutOfBoundsExceptions, i.e. apparently not caused by your own array handling code, is the concurrent use of SimpleDateFormat. Particularly in a servlet or controller: If two threads enter the SimplateDateFormat.parse() method together you will likely see an ArrayIndexOutOfBoundsException. Note the synchronization section of the class javadoc for SimpleDateFormat. Make sure there is no place in your code that are accessing thread unsafe classes like SimpleDateFormat in a concurrent manner like in a servlet or controller. Check all instance variables of your servlets and controllers for likely suspects. ArrayIndexOutOfBoundsException whenever this exception is coming it mean you are trying to use an index of array which is out of its bounds or in lay man terms you are requesting more than than you have initialised. To prevent this always make sure that you are not requesting a index which is not present in array i.e. if array length is 10 then your index must range between 0 to 9 ArrayIndexOutOfBounds means you are trying to index a position within an array that is not allocated. In this case: To get around this... In your for loop, you can do i < name.length. This would prevent looping to name and would instead stop at name for(int i = 0; i<name.length; i++) Use a for each loop String name = { "tom", "dick", "harry" };
for(String n : name) {
    System.out.println(n);
} Use list.forEach(Consumer action) (requires Java8) String name = { "tom", "dick", "harry" };
Arrays.asList(name).forEach(System.out::println); Convert array to stream - this is a good option if you want to perform additional 'operations' to your array e.g. filter, transform the text, convert to a map etc (requires Java8) String name = { "tom", "dick", "harry" };
---  Arrays.asList(name).stream().forEach(System.out::println);
---  Stream.of(name).forEach(System.out::println); ArrayIndexOutOfBoundsException means that you are trying to access an index of the array that does not exist or out of the bound of this array. Array indexes start from 0 and end at length - 1. In your case ArrayIndexOutOfBoundsException happens when you are trying to access 
the name.length indexed element which does not exist (array index ends at  length -1). just replacing <= with < would solve this problem. For any array of length n, elements of the array will have an index from 0 to n-1. If your program is trying to access any element (or memory) having array index greater than n-1, then Java will throw ArrayIndexOutOfBoundsException So here are two solutions that we can use in a program Maintaining count: Or some other looping statement like A better way go with a for each loop, in this method a programmer has no need to bother about the number of elements in the array. According to your Code : If You check
System.out.print(name.length); you will get 3; that mean your name length is 3 your loop is running from 0 to 3 
which should be running either "0 to 2" or "1 to 3" Answer Each item in an array is called an element, and each element is accessed by its numerical index. As shown in the preceding illustration, numbering begins with 0. The 9th element, for example, would therefore be accessed at index 8. IndexOutOfBoundsException is thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range. Any array X, can be accessed from I see all the answers here explaining how to work with arrays and how to avoid the index out of bounds exceptions.  I personally avoid arrays at all costs.  I use the Collections classes, which avoids all the silliness of having to deal with array indices entirely.  The looping constructs work beautifully with collections supporting code that is both easier to write, understand and maintain. If you use an array's length to control iteration of a for loop, always remember that the index of the first item in an array is 0. So the index of the last element in an array is one less than the array's length. ArrayIndexOutOfBoundsException name itself explains that If you trying to access the value at the index which is out of the scope of Array size then such kind of exception occur. In your case, You can just remove equal sign from your for loop. The better option is to iterate an array: This error is occurs at runs loop  overlimit times.Let's consider simple example like this, At first, I have initialized an array as 'numberArray'. then , some array elements are printed using for loop. When loop is running 'i' time , print the (numberArray element..(when i value is 1, numberArray element is printed.)..Suppose that, when i=(numberArray.length-2), last element of array is printed..When 'i' value goes to (numberArray.length-1) , no value for printing..In that point , 'ArrayIndexOutOfBoundsException' is occur.I hope to you could get idea.thank you ! You can use Optional in functional style to avoid NullPointerException and ArrayIndexOutOfBoundsException : Output: You could not iterate or store more data than the length of your array. In this case you could do like this: Or this: To subscribe to this RSS feed, copy and paste this URL into your RSS reader. site design / logo © 2020 Stack Exchange Inc; user contributions licensed under cc by-sa.                    rev 2020.10.19.37839 