By using our site, you acknowledge that you have read and understand our Cookie Policy, Privacy Policy, and our Terms of Service. Teams Q&A for Work Stack Overflow for Teams is a private, secure spot for you and
                            your coworkers to find and share information. I have a class defined as follows: I tried to print an instance of my class: but I got the following output: com.foo.Person@2f92e0f4. A similar thing happened when I tried to print an array of Person objects: I got the output: [Lcom.foo.Person;@28a418fc What does this output mean? How do I change this output so it contains the name of my person? And how do I print collections of my objects? Note: this is intended as a canonical Q&A about this subject. All Java objects have a toString() method, which is invoked when you try and print the object. This method is defined in the Object class (the superclass of all Java objects). The Object.toString() method returns a fairly ugly looking string, composed of the name of the class, an @ symbol and the hashcode of the object in hexadecimal. The code for this looks like: A result such as com.foo.MyType@2f92e0f4 can therefore be explained as: The name of array classes look a little different, which is explained well in the Javadocs for Class.getName(). For instance, [Ljava.lang.String means: To print something different when you call System.out.println(myObject), you must override the toString() method in your own class. Here's a simple example: Now if we print a Person, we see their name rather than com.foo.Person@12345678. Bear in mind that toString() is just one way for an object to be converted to a string. Typically this output should fully describe your object in a clear and concise manner. A better toString() for our Person class might be: Which would print, e.g., Person. That's a really useful piece of data for debugging/testing. If you want to focus on just one aspect of your object or include a lot of jazzy formatting, you might be better to define a separate method instead, e.g. String toElegantReport() {...}. Many IDEs offer support for auto-generating a toString() method, based on the fields in the class. See docs for Eclipse and IntelliJ, for example. Several popular Java libraries offer this feature as well. Some examples include: ToStringBuilder from Apache Commons Lang MoreObjects.ToStringHelper from Google Guava @ToString annotation from Project Lombok So you've created a nice toString() for your class. What happens if that class is placed into an array or a collection? If you have an array of objects, you can call Arrays.toString() to produce a simple representation of the contents of the array. For instance, consider this array of Person objects: Note:  this is a call to a static method called toString() in the Arrays class, which is different to what we've been discussing above. If you have a multi-dimensional array, you can use Arrays.deepToString() to achieve the same sort of output. Most collections will produce a pretty output based on calling .toString() on every element. So you just need to ensure your list elements define a nice toString() as discussed above. I think apache provides a better util class which provides a function to get the string Every class in Java has the toString() method in it by default, which is called if you pass some object of that class to System.out.println(). By default, this call returns the className@hashcode of that object. You can override the toString method of a class to get different output. See this example In Eclipse,
Go to your class,
Right click->source->Generate toString(); It will override the toString() method and will print the object of that class. I prefer to use a utility function which uses GSON to de-serialize the Java object into JSON string. In intellij you can auto generate toString method by  pressing alt+inset and then selecting toString() here is an out put for a test class: As you can see, it generates a String by concatenating, several attributes of the class, for primitives it will print their values and for reference types it will use their class type (in this case to string method of Test2). By default, every Object in Java has the toString() method which outputs the ObjectType@HashCode. If you want more meaningfull information then you need to override the toString() method in your class. Now when you print the person object using System.out.prtinln(personObj); it will print the name of the person instead of the classname and hashcode. In your second case when you are trying to print the array, it prints [Lcom.foo.Person;@28a418fc the Array type and it's hashcode. If you want to print the person names, there are many ways. You could write your own function that iterates each person and prints You could print it using Arrays.toString(). This seems the simplest to me. You could print it the java 8 way (using streams and method reference). There might be other ways as well. Hope this helps. :) If you Directly print any object of Person It will the ClassName@HashCode to the Code. in your case com.foo.Person@2f92e0f4 is getting printed . Where Person is a class to which object belongs and 2f92e0f4 is hashCode of the Object. Now if you try to Use the object of Person then it will print the name If you look at the Object class (Parent class of all classes in Java) the toString() method implementation is whenever you print any object in Java then toString() will be call. Now it's up to you if you override  toString() then your method will call other Object class method call. To subscribe to this RSS feed, copy and paste this URL into your RSS reader. site design / logo © 2020 Stack Exchange Inc; user contributions licensed under cc by-sa.                    rev 2020.10.19.37839 